type Post {
  id: ID!
  body: String!
  createdAt: String!
  username: String!
  comments: [Comment]!
  likes: [Like]!
  likeCount: Int!
  commentCount: Int!
}
type Comment {
  id: ID!
  createdAt: String!
  username: String!
  body: String!
}
type Like {
  id: ID!
  createdAt: String!
  username: String!
}
type User {
  id: ID!
  email: String!
  token: String!
  username: String!
  createdAt: String!
  updatedAt: String!
  resetToken: String
  resetTokenExpires: Float
  emailVerified: Boolean
  emailVerifiedToken: String
}
type SuccessMessage {
  message: String
}
input RegisterInput {
  username: String!
  password: String!
  confirmPassword: String!
  email: String!
}
type Query {
  getUser: User
  getPosts: [Post]
  getMyPosts: [Post]
  getPost(postId: ID!): Post
}
type Mutation {
  # USER
  register(registerInput: RegisterInput): User!
  login(username: String!, password: String!): User!
  updateUser(email: String, password: String): User!
  forgotPassword(email: String!): SuccessMessage
  resetPassword(resetToken: String!, password: String!): User!
  verifyEmail(emailVerifiedToken: String!): User!
  # POST
  createPost(body: String!): Post!
  deletePost(postId: ID!): String!
  createComment(postId: ID!, body: String!): Post!
  deleteComment(postId: ID!, commentId: ID!): Post!
  likePost(postId: ID!): Post!
}
type Subscription {
  newPost: Post!
}
